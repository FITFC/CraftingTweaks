buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
        mavenCentral()
    }
    dependencies {
        classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "3.+", changing: true
    }
}

apply plugin: "net.minecraftforge.gradle"
apply plugin: "maven"

def BUILD_NUMBER = System.getenv("BUILD_NUMBER") ?: patch_version

sourceCompatibility = targetCompatibility = '1.8'
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

version = major_version + "." + minor_version + "." + BUILD_NUMBER
group = "net.blay09.mods"
archivesBaseName = mod_name + "_" + minecraft_version

sourceSets {
    api {
        compileClasspath += sourceSets.main.compileClasspath
    }
    main {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
}

minecraft {
    mappings channel: mappings_channel, version: mappings_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
//            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                craftingtweaks {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }
        server {
            workingDirectory project.file('run')
//            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                craftingtweaks {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }
        data {
            workingDirectory project.file('run')
//            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'craftingtweaks', '--all', '--output', file('src/generated/resources/')

            mods {
                craftingtweaks {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }
    }
}

repositories {
    maven {
        url "https://minecraft.curseforge.com/api/maven/"
    }
}

dependencies {
    minecraft([
            group  : "${forge_group}",
            name   : "forge",
            version: "${minecraft_version}-${forge_version}"
    ])
}

jar {
    from sourceSets.main.output.classesDirs
    from sourceSets.api.output.classesDirs
    from sourceSets.main.output.resourcesDir
    from sourceSets.api.output.resourcesDir

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes(["Specification-Title"     : mod_id,
                    "Specification-Vendor"    : "BlayTheNinth",
                    "Specification-Version"   : "1",
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : "${version}",
                    "Implementation-Vendor"   : "BlayTheNinth",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            def mavenUsername = project.hasProperty('mavenUsername') ? project.property('mavenUsername') : ''
            def mavenPassword = project.hasProperty('mavenPassword') ? project.property('mavenPassword') : ''
            def releasesRepoUrl = 'https://artifactory.blay09.net/artifactory/libs-release-local'
            def snapshotsRepoUrl = 'https://artifactory.blay09.net/artifactory/libs-snapshot-local'
            repository(url: version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl) {
                authentication(userName: mavenUsername, password: mavenPassword)
            }

            pom {
                groupId = project.group
                version = project.version
                artifactId = project.archivesBaseName
            }

            pom.withXml {
                asNode().dependencies.dependency.findAll {
                    it.scope.text() == "compile"
                }.each {
                    if(it.optional)
                        it.optional.value = 'true'
                    else
                        it.appendNode('optional', 'true');
                }
            }
        }
    }
}
